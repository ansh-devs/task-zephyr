// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protov3/orchestrator.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrchestratorService_UpdateTaskStatus_FullMethodName = "/protov3.OrchestratorService/UpdateTaskStatus"
	OrchestratorService_HealthCheck_FullMethodName      = "/protov3.OrchestratorService/HealthCheck"
)

// OrchestratorServiceClient is the client API for OrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorServiceClient interface {
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type orchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorServiceClient(cc grpc.ClientConnInterface) OrchestratorServiceClient {
	return &orchestratorServiceClient{cc}
}

func (c *orchestratorServiceClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*UpdateTaskStatusResponse, error) {
	out := new(UpdateTaskStatusResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_UpdateTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, OrchestratorService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServiceServer is the server API for OrchestratorService service.
// All implementations must embed UnimplementedOrchestratorServiceServer
// for forward compatibility
type OrchestratorServiceServer interface {
	UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedOrchestratorServiceServer()
}

// UnimplementedOrchestratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServiceServer struct {
}

func (UnimplementedOrchestratorServiceServer) UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*UpdateTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedOrchestratorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOrchestratorServiceServer) mustEmbedUnimplementedOrchestratorServiceServer() {}

// UnsafeOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServiceServer will
// result in compilation errors.
type UnsafeOrchestratorServiceServer interface {
	mustEmbedUnimplementedOrchestratorServiceServer()
}

func RegisterOrchestratorServiceServer(s grpc.ServiceRegistrar, srv OrchestratorServiceServer) {
	s.RegisterService(&OrchestratorService_ServiceDesc, srv)
}

func _OrchestratorService_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).UpdateTaskStatus(ctx, req.(*UpdateTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrchestratorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorService_ServiceDesc is the grpc.ServiceDesc for OrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protov3.OrchestratorService",
	HandlerType: (*OrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _OrchestratorService_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _OrchestratorService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protov3/orchestrator.proto",
}

const (
	BackgroundWorkerService_AssignTaskToWorker_FullMethodName = "/protov3.BackgroundWorkerService/AssignTaskToWorker"
)

// BackgroundWorkerServiceClient is the client API for BackgroundWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackgroundWorkerServiceClient interface {
	AssignTaskToWorker(ctx context.Context, in *AssignTaskToWorkerRequest, opts ...grpc.CallOption) (*AssignTaskToWorkerResponse, error)
}

type backgroundWorkerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackgroundWorkerServiceClient(cc grpc.ClientConnInterface) BackgroundWorkerServiceClient {
	return &backgroundWorkerServiceClient{cc}
}

func (c *backgroundWorkerServiceClient) AssignTaskToWorker(ctx context.Context, in *AssignTaskToWorkerRequest, opts ...grpc.CallOption) (*AssignTaskToWorkerResponse, error) {
	out := new(AssignTaskToWorkerResponse)
	err := c.cc.Invoke(ctx, BackgroundWorkerService_AssignTaskToWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackgroundWorkerServiceServer is the server API for BackgroundWorkerService service.
// All implementations must embed UnimplementedBackgroundWorkerServiceServer
// for forward compatibility
type BackgroundWorkerServiceServer interface {
	AssignTaskToWorker(context.Context, *AssignTaskToWorkerRequest) (*AssignTaskToWorkerResponse, error)
	mustEmbedUnimplementedBackgroundWorkerServiceServer()
}

// UnimplementedBackgroundWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackgroundWorkerServiceServer struct {
}

func (UnimplementedBackgroundWorkerServiceServer) AssignTaskToWorker(context.Context, *AssignTaskToWorkerRequest) (*AssignTaskToWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTaskToWorker not implemented")
}
func (UnimplementedBackgroundWorkerServiceServer) mustEmbedUnimplementedBackgroundWorkerServiceServer() {
}

// UnsafeBackgroundWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackgroundWorkerServiceServer will
// result in compilation errors.
type UnsafeBackgroundWorkerServiceServer interface {
	mustEmbedUnimplementedBackgroundWorkerServiceServer()
}

func RegisterBackgroundWorkerServiceServer(s grpc.ServiceRegistrar, srv BackgroundWorkerServiceServer) {
	s.RegisterService(&BackgroundWorkerService_ServiceDesc, srv)
}

func _BackgroundWorkerService_AssignTaskToWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTaskToWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackgroundWorkerServiceServer).AssignTaskToWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackgroundWorkerService_AssignTaskToWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackgroundWorkerServiceServer).AssignTaskToWorker(ctx, req.(*AssignTaskToWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackgroundWorkerService_ServiceDesc is the grpc.ServiceDesc for BackgroundWorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackgroundWorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protov3.BackgroundWorkerService",
	HandlerType: (*BackgroundWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignTaskToWorker",
			Handler:    _BackgroundWorkerService_AssignTaskToWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protov3/orchestrator.proto",
}
